// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using order_and_sales_management_ver1.Data;

namespace order_and_sales_management_ver1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190805152628_keychange")]
    partial class keychange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.EmployeesModel", b =>
                {
                    b.Property<int>("personelID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accessFailedCount");

                    b.Property<string>("connectionId");

                    b.Property<string>("password")
                        .HasMaxLength(32);

                    b.Property<string>("persName")
                        .HasMaxLength(40);

                    b.Property<string>("persSurName")
                        .HasMaxLength(40);

                    b.Property<bool>("recStatus");

                    b.Property<bool>("userActive");

                    b.Property<string>("userName");

                    b.Property<string>("userRole");

                    b.HasKey("personelID");

                    b.ToTable("EmployeesModel");
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.OrderDetailsModel", b =>
                {
                    b.Property<int>("orderID");

                    b.Property<int>("orderLineNo");

                    b.Property<int?>("OrderModelorderID");

                    b.Property<string>("orderCritic");

                    b.Property<int>("orderDeliveryDate");

                    b.Property<int>("productAmount");

                    b.Property<int>("productID");

                    b.Property<int>("productQualityChecker");

                    b.Property<int>("productionLotID");

                    b.Property<bool>("recStatus");

                    b.HasKey("orderID", "orderLineNo");

                    b.HasIndex("OrderModelorderID");

                    b.HasIndex("productID");

                    b.ToTable("OrderDetailsModels");
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.OrderModel", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("orderDate");

                    b.Property<int?>("orderOwnerEmployeeModelpersonelID");

                    b.Property<int>("orderOwner_personelID");

                    b.Property<bool>("recStatus");

                    b.HasKey("orderID");

                    b.HasIndex("orderOwnerEmployeeModelpersonelID");

                    b.HasIndex("orderOwner_personelID");

                    b.ToTable("OrderModel");
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.PackagedProductDetailsModel", b =>
                {
                    b.Property<int>("PackedProductID");

                    b.Property<int>("PackagedProductLineNo");

                    b.Property<double>("Amount");

                    b.Property<int>("ProductID");

                    b.HasKey("PackedProductID", "PackagedProductLineNo");

                    b.HasAlternateKey("PackagedProductLineNo", "PackedProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("PackagedProductDetailsModels");
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.ProductModel", b =>
                {
                    b.Property<int>("productID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductName");

                    b.Property<string>("productBarcodeID");

                    b.Property<double>("productRetailPrice");

                    b.Property<double>("productWholesalePrice");

                    b.Property<bool>("recStatus");

                    b.HasKey("productID");

                    b.ToTable("ProductModels");
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.SalesModel", b =>
                {
                    b.Property<DateTime>("saleDate");

                    b.Property<int>("salesID");

                    b.Property<int>("salesLineId");

                    b.Property<int>("amount");

                    b.Property<int>("personelID");

                    b.Property<int>("productID");

                    b.Property<int>("typeOfCollection");

                    b.HasKey("saleDate", "salesID", "salesLineId");

                    b.HasIndex("personelID");

                    b.HasIndex("productID");

                    b.ToTable("SalesModels");
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.StockItem", b =>
                {
                    b.Property<int>("productID");

                    b.Property<int>("locationID");

                    b.Property<int?>("StockLocationModellocationID");

                    b.Property<string>("productionLotID")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("recStatus");

                    b.Property<double>("stockAmount");

                    b.HasKey("productID", "locationID");

                    b.HasAlternateKey("locationID", "productID", "productionLotID");

                    b.HasIndex("StockLocationModellocationID");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.StockLocationModel", b =>
                {
                    b.Property<int>("locationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("locationName");

                    b.HasKey("locationID");

                    b.ToTable("StockLocationModel");
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.TeraziScreenMapping", b =>
                {
                    b.Property<int>("teraziID");

                    b.Property<int>("productID");

                    b.Property<int?>("screenSeqNo");

                    b.HasKey("teraziID", "productID");

                    b.HasAlternateKey("productID", "teraziID");

                    b.ToTable("TeraziScreenMapping");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.OrderDetailsModel", b =>
                {
                    b.HasOne("Order_And_Sales_Management_ver1.Models.OrderModel", "OrderModel")
                        .WithMany("OrderDetailsModels")
                        .HasForeignKey("OrderModelorderID");

                    b.HasOne("Order_And_Sales_Management_ver1.Models.ProductModel", "ProductModel")
                        .WithMany("OrderDetailsModels")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.OrderModel", b =>
                {
                    b.HasOne("Order_And_Sales_Management_ver1.Models.EmployeesModel", "orderOwnerEmployeeModel")
                        .WithMany()
                        .HasForeignKey("orderOwnerEmployeeModelpersonelID");

                    b.HasOne("Order_And_Sales_Management_ver1.Models.EmployeesModel")
                        .WithMany()
                        .HasForeignKey("orderOwner_personelID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.PackagedProductDetailsModel", b =>
                {
                    b.HasOne("Order_And_Sales_Management_ver1.Models.ProductModel", "ProductModel")
                        .WithMany("PackagedProductDetailsModels")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.SalesModel", b =>
                {
                    b.HasOne("Order_And_Sales_Management_ver1.Models.EmployeesModel", "EmployeesModel")
                        .WithMany()
                        .HasForeignKey("personelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Order_And_Sales_Management_ver1.Models.ProductModel", "ProductModel")
                        .WithMany("SalesModels")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Order_And_Sales_Management_ver1.Models.StockItem", b =>
                {
                    b.HasOne("Order_And_Sales_Management_ver1.Models.StockLocationModel", "StockLocationModel")
                        .WithMany()
                        .HasForeignKey("StockLocationModellocationID");
                });
#pragma warning restore 612, 618
        }
    }
}
