@model order_and_sales_management_ver1.Models.packedproduct
@{
    ViewData["Title"] = "Liste";
}
<div class="panel-info">
    <h1>PAKETLİ ÜRÜN TANIMLAMA DETAY GÖRÜNTÜLEME</h1>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<div class="alert alert-danger">
    @Html.ValidationSummary(false)
</div>
<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.packedProductName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.packedProductName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.packedProductBarcodeID)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.packedProductBarcodeID)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.productRetailPrice)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.productRetailPrice)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.productWholesalePrice)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.productWholesalePrice)
        </dd>
    </dl>
    <table id="packedDetails" class="table-striped table-curved" style="font-size:0.7em">
        <colgroup>
            <col style="width:5%">
            <col style="width:40%">
            <col style="width:5%">
            <col style="width:5%">
            <col style="width:30%">
            <col style="width:5%">
            <col style="width:5%">
        </colgroup>
        <thead class="table-head">
            <tr>
                <th>
                    @Html.LabelFor(modelItem => Model.packedProductDetails.ElementAt(0).baseId)
                </th>
                <th>
                    @Html.LabelFor(modelItem => Model.packedProductDetails.ElementAt(0).baseProduct.name)
                </th>
                <th>
                    @Html.LabelFor(modelItem => Model.packedProductDetails.ElementAt(0).baseProduct.retailPrice)
                </th>
                <th>
                    @Html.LabelFor(modelItem => Model.packedProductDetails.ElementAt(0).baseProduct.wholeSalePrice)
                </th>
                <th>
                    @Html.LabelFor(modelItem => Model.packedProductDetails.ElementAt(0).amount)
                </th>
                <th>
                    <label>Perakende Tutar</label>
                </th>
                <th>
                    <label>Toptan Tutar</label>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            @foreach (var item in Model.packedProductDetails)
            {
                <tr>
                    <td>
                        @Html.EditorFor(modelItem => item.baseProduct.baseId, new { htmlAttributes = new { id = item.baseProduct.baseId, size = "4", disabled = true } })
                        @Html.HiddenFor(modelItem => item.baseProduct.baseId, new { htmlAttributes = new { id = item.baseProduct.baseId, size = "4" } })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.baseProduct.name)
                    </td>
                    <td>
                        @Html.EditorFor(modelItem => item.baseProduct.retailPrice, new { htmlAttributes = new { id = "productRetailPrice" + item.baseProduct.baseId, size = "4" } })
                    </td>
                    <td>
                        @Html.EditorFor(modelItem => item.baseProduct.wholeSalePrice, new { htmlAttributes = new { id = "productWholesalePrice" + item.baseProduct.baseId }, size = "4" })
                    </td>
                    <td>
                        @Html.EditorFor(modelItem => item.amount, new { htmlAttributes = new { id = "productAmount" + item.baseProduct.baseId, onblur = "calcTutar()" } })
                    </td>
                    <td>
                        <input class="text-box single-line" id="productRetailSum-@item.baseProduct.baseId" size="4" readonly value="0" />
                    </td>
                    <td>
                        <input class="text-box single-line" id="productWholesaleSum-@item.baseProduct.baseId" size="4" readonly value="0" />
                    </td>
                </tr>
            }
        </tbody>
    </table>

</div>
<div>
    @Html.ActionLink("Güncelle", "Create", "packedproducts", new { packedId = Model.packedId }, new { @class = "btn btn-primary  btn-sm", @style = "font-size:12px" })
    @Html.ActionLink("Liste", "Index", "packedproducts", null, new { @class = "btn btn-primary  btn-sm", @style = "font-size:12px" })
</div>

<script>
    $(document).ready(function () {
        calcTutar();
    });

    function calcTutar() {
        var table = document.getElementById("packedDetails");
        retailToplam = 0;
        wholesaleToplam = 0;
        i = 2
        for (i = 2; i < table.rows.length; i++) {
            var packedId = table.rows[i].cells[0].children[0].value;
            strAmount = document.getElementById("productAmount" + packedId).value.replace(',', '.');
            var floatAmount = parseFloat(strAmount);
            strPrice = document.getElementById("productRetailPrice" + packedId).value.replace(',', '.');
            var floatRetailPrice = parseFloat(strPrice).toFixed(2);
            retailTutar = (floatAmount * floatRetailPrice).toFixed(2);
            strPrice = document.getElementById("productWholesalePrice" + packedId).value.replace(',', '.');
            var floatWholesalePrice = parseFloat(strPrice).toFixed(2);
            wholesaleTutar = (floatAmount * floatWholesalePrice).toFixed(2);
            table.rows[i].cells[2].innerHTML = '<input class="text-box single-line" size="4" id="productRetailPrice' + packedId + '"disabled readonly value="' + floatRetailPrice.toLocaleString("tr-TR").replace(',', '.') + '"/>';
            table.rows[i].cells[3].innerHTML = '<input class="text-box single-line" size="4" id="productWholesalePrice' + packedId + '" disabled readonly value="' + floatWholesalePrice.toLocaleString("tr-TR").replace(',', '.') + '"/>';
            table.rows[i].cells[4].innerHTML = '<input class="text-box single-line" name="packedproductdetails.amount" id="productAmount' + packedId + '"onblur=calcTutar() value="' + floatAmount.toLocaleString().replace(',', '.') + '"/>';
            table.rows[i].cells[5].innerHTML = '<input class="text-box single-line" size="4" id="productRetailSum-' + packedId + '" disabled readonly value="' + retailTutar.toLocaleString("tr-TR").replace(',', '.') + '"/>';
            table.rows[i].cells[6].innerHTML = '<input class="text-box single-line" size="4" id="productWholesaleSum-' + packedId + '" disabled readonly value="' + wholesaleTutar.toLocaleString("tr-TR").replace(',', '.') + '"/>';
            retailToplam = retailToplam + parseFloat(retailTutar);
            wholesaleToplam = wholesaleToplam + parseFloat(wholesaleTutar);
        }
        retailToplam = retailToplam.toFixed(2);
        wholesaleToplam = wholesaleToplam.toFixed(2);
        table.rows[1].cells[5].innerHTML = '<input class="text-box single-line" disabled readonly size="4" value="' + retailToplam.toLocaleString("tr-TR").replace(',', '.') + '"/>';
        table.rows[1].cells[6].innerHTML = '<input class="text-box single-line" disabled readonly size="4" value="' + wholesaleToplam.toLocaleString("tr-TR").replace(',', '.') + '"/>';
        var elem = document.getElementById("productRetailPrice");
        elem.value = retailToplam.toLocaleString("tr-TR");
        var elem = document.getElementById("productWholesalePrice");
        elem.value = wholesaleToplam.toLocaleString("tr-Tr");
    }
</script>
