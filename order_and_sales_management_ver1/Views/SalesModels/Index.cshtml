@model IEnumerable<order_and_sales_management_ver1.Models.SalesModel>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="panel-info">
    <h1>Satış Ekle</h1>
</div>

<div class="alert alert-danger">
    @Html.ValidationSummary(false)
</div>

<hr />

<div class="row">
    <div class="col-lg-2">
        @Html.DisplayNameFor(model => model.productBarcodeID)
    </div>
    <div class="col-lg-2">
        <input type="text" id="productBarcodeID">
    </div>
    <div class="col-lg-2">
        @Html.DisplayNameFor(model => model.amount)
    </div>
    <div class="col-lg-2">
        <input type="text" id="amountentered" value="1" onblur="AddNewSaleItem()">
    </div>

    <div class="col-lg-2">
        <input id="Guncelle" class="btn btn-primary btn-sm btn-block" type="button" value="Güncelle" style="font-size:12px" onclick="UpdateSales()">
    </div>
    <div class="col-lg-2">
    </div>
</div>
    <div class="table-responsive">
        <table class="table table-striped table-curved " style="font-size:0.9em" id="saleTable">
            <thead class="table-head">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.salesID)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.employeesmodels.personelID)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.personelNameSurname)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Products.productBarcodeID)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Products.productName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.amount)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.tutar)
                    </th>
                    <th>
                        İşlem
                    </th>
                </tr>
            </thead>
            <tbody>
                    @foreach(var item in Model)
                    {
                    <tr>
                        <td class="salesID">
                            @Html.DisplayFor(modelItem => item.salesID)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.personelID)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.personelNameSurname)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Products.productBarcodeID)
                        </td>

                        <td>
                            @Html.DisplayFor(modelItem => item.Products.productName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.amount)
                        </td>
                        <td style="text-align:right">
                            @Html.DisplayFor(modelItem => item.tutar)
                        </td>
                        <td>
                            @Html.HiddenFor(modelItem => item.wholesaleamount, new { Id = "wholesaleamount" + @item.salesLineId})
                        </td>
                        <td>
                            <input type="button" value="Sil" class="btn-sm btn-danger" style="font-size:10px" onclick="deleteLine(@item.salesLineId)" />
                        </td>
                    </tr>
                        }
            </tbody>
        </table>
    </div>
    <script>

     $(document).ready(function () {
         //       $("#entryForm").hide();
         var barcode = document.getElementById("productBarcodeID");
         barcode.focus();
     });

    function UpdateSales() {
            var listOfProducts = {};
            listOfProducts = new Array();
            var saleTableBodyRef = document.getElementById("saleTable").getElementsByTagName('tbody')[0];
            for (i = 1; i < saleTableBodyRef.rows.length; i++) {
                var row = saleTableBodyRef.rows[i]
                listOfProducts.push({
                    "salesID": row.cells.item(0).innerHTML.trim(),
                    "personelID": row.cells.item(1).innerHTML.trim(),
                    "productBarcodeID": row.cells.item(3).innerHTML.trim(),
                    "tutar": row.cells.item(6).innerHTML.trim().replace(',', '.'),
                    "amount": row.cells.item(5).innerHTML.trim().replace(',', '.'),
                    "wholesaleamount": document.getElementById("wholesaleamount" + (i+1)).value.replace(',', '.')
                })
            }
            var xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function () {
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                if (xmlhttp.status == 200) {
                }
                else if (xmlhttp.status == 400) {
                    alert('There was an error 400');
                }
                else {
                    alert('something else other than 200 was returned');
                }
            }
        };
        var jsonstr = JSON.stringify(listOfProducts);
        xmlhttp.open("GET", "/SalesModels/UpdateSales?listOfProducts=" +jsonstr, false);
        xmlhttp.send();
        window.location.href = "/DisplaySales";
    }
     function onkeyup_1() {
         var barcode = document.getElementById("productBarcodeID");
         if (barcode.length >= 13) {
             alert(barcode);
         }
     }
    function AddNewSaleItem() {
        var barcode = document.getElementById("productBarcodeID");
        barcodeVal = barcode.value;
        if (barcodeVal.length < 13) {
            barcodeVal=barcodeVal.padStart(6, '0');
            barcodeVal = "8693819" + barcodeVal;
        }
        if (barcodeVal.length>= 13) {
            var salesID = document.getElementsByClassName("salesID")[0];
            $.ajax({
                type: 'GET',
                url: '@Url.Action("getProductByBarcode", "SalesModels")',
                data: {
                    "barcodeID": barcodeVal,
                    "salesID": salesID.innerHTML.trim()
                },
                success: function (data) {
                    if (data.salesID != -1) {
                        var saleTableBodyRef = document.getElementById("saleTable").getElementsByTagName('tbody')[0];
                        var newRow = saleTableBodyRef.insertRow();

                        var newCell = newRow.insertCell();
                        var newText = document.createTextNode(data.salesID);
                        newCell.appendChild(newText);

                        var newCell = newRow.insertCell();
                        var newText = document.createTextNode(data.personelID);
                        newCell.appendChild(newText);

                        var newCell = newRow.insertCell();
                        newText = document.createTextNode(data.personelNameSurname);
                        newCell.appendChild(newText);

                        var newCell = newRow.insertCell();
                        newText = document.createTextNode(data.productBarcodeID);
                        newCell.appendChild(newText);

                        newCell = newRow.insertCell();
                        newText = document.createTextNode(data.products.productName);
                        newCell.appendChild(newText)

                        newCell = newRow.insertCell();
                        data.amount = document.getElementById("amountentered").value.trim().replace(",", ".");
                        newText = document.createTextNode(data.amount);
                        newCell.appendChild(newText);
                        tutar = data.amount * data.tutar;
                        var mytext = tutar.toFixed(2);
                        newCell = newRow.insertCell();
                        newCell.style = "text-align:right";
                        newText = document.createTextNode(mytext.trim());
                        newCell.appendChild(newText);

                        newcell = newRow.insertCell();
                        wholesaleamount = data.amount * data.wholesaleamount;
                        mytext = wholesaleamount.toFixed(2);
                        newcell.innerHTML = '<input Id="wholesaleamount' + newRow.rowIndex.toString() + '" name="item.wholsaleamount" type="hidden" value="' + mytext+'" />';

                        newCell = newRow.insertCell();
                        newCell.innerHTML = '<input type="button" value="Sil" class="btn-sm btn-danger" style="font-size:10px" onclick="deleteLine(' + newRow.rowIndex + ')" />'
                        calcTotal();
                    }
                }
            })
            barcode.value = "";
            barcode.focus();
        }
    }

     function calcTotal() {
         var saleTableBodyRef = document.getElementById("saleTable").getElementsByTagName('tbody')[0];
         TotalTutar = 0.0;
         for (i = 1; i < saleTableBodyRef.rows.length; i++) {
             tutar = saleTableBodyRef.rows[i].cells[6].innerHTML.trim();
             TotalTutar = TotalTutar + parseFloat(tutar);
         }
         saleTableBodyRef.rows[0].cells[6].innerHTML= TotalTutar.toFixed(2);
     }

        function deleteLine(rowID) {
            if (rowID > 1) {
                var table = document.getElementById("saleTable");
                table.deleteRow(rowID)
            }
            calcTotal();
            var barcode = document.getElementById("productBarcodeID");
            barcode.focus();
     }
    </script>
