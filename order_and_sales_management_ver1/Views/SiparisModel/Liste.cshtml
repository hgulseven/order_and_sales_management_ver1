@model List<Order_And_Sales_Management_ver1.Models.OrderModel>

@{
    ViewBag.Title = "SİPARİŞLER";
}

<div class="panel-info">
    <h1>SİPARİŞLER</h1>
    <h4>Sipariş Listesi</h4>
</div>
<div class="alert alert-danger">
    @Html.ValidationSummary(false)
</div>

<hr />
<form id="myform">
    <div class="table-responsive">
        <table class="table table-striped table-curved " style="font-size:0.7em">
            <thead class="table-head">
                <tr>
                    <th>
                        @Html.DisplayNameFor(OrderModel => OrderModel[0].orderID)
                    </th>
                    <th style="text-align:right">
                        @Html.DisplayNameFor(OrderModel => OrderModel[0].orderDate)
                    </th>
                    <th style="text-align:right">
                        @Html.DisplayNameFor(OrderModel => OrderModel[0].orderLocation.locationName)
                    </th>
                    <th style="text-align:right">
                        @Html.DisplayNameFor(OrderModel => OrderModel[0].orderOwnerEmployeeModel.persName)
                    </th>
                    <th>
                    </th>
                </tr>
            </thead>
            @foreach (var item in Model)
            {
                <tr id=@item.orderID style="border-bottom: 1px solid #cdd0d4;">
                    <td>
                        @Html.DisplayFor(Item => item.orderID)
                    </td>
                    <td style="text-align:right">
                        @Html.DisplayFor(Item => item.orderDate)
                    </td>
                    <td style="text-align:right">
                        @Html.DisplayFor(Item => item.orderLocation.locationName)
                    </td>
                    <td style="text-align:right">
                        @Html.DisplayFor(Item => item.orderOwnerEmployeeModel.persName)
                    </td>
                    <td width="75">
                        <input id="clickMe" class="btn btn-primary btn-sm btn-block" type="button" value="Detaylar" style="font-size:10px" onclick="addTable(@item.orderID);" />
                    </td>
                </tr>
                <tr>
                        <thead class="table-head">
                            <tr id="header.@item.orderID" style="display:none;border-left: 1px solid #cdd0d4;border-right:1px solid #cdd0d4;" class="table-head">
                                <th>
                                    @Html.DisplayNameFor(x => item.orderdetailsmodels.ElementAt(0).orderLineNo)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(x => item.orderdetailsmodels.ElementAt(0).ProductModel.ProductName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(x => item.orderdetailsmodels.ElementAt(0).productAmount)
                                </th>
                            </tr>
                        </thead>
                        @foreach (var detailsItem in item.orderdetailsmodels)
                        {
                                <tr id="details.@item.orderID.@detailsItem.orderLineNo" style="display: none;">
                                    <td>
                                        @Html.DisplayFor(x => detailsItem.orderLineNo)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(x => detailsItem.ProductModel.ProductName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(x => detailsItem.productAmount)
                                    </td>
                                </tr>
                        }
                </tr>
                }
            </table>
            </div>
        </form>

        @section scripts {
            @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

            <!--Script references. -->
            <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
            <!--Reference the SignalR library. -->
            <script src="~/lib/signalr/dist/browser/signalr.js"></script>
            <!--Reference the autogenerated SignalR hub script. -->
            <!--SignalR script to update the chat page and send messages.-->
            <script>

        function calculateIndirim(salesID)
        {
            elemID = "indirimOran" + salesID.toString();
            htmlElement = document.getElementById(elemID);
            row = htmlElement.parentNode.parentNode;
            var IndirimOranı = parseFloat(htmlElement.value);
            var tutar=parseFloat(row.cells[1].innerHTML.trim())
            var tahsilEdilen = tutar-(IndirimOranı * tutar)/100;
            row.cells[3].innerHTML = '<input id=paidTutar'+salesID+' data-val=true value="'+tahsilEdilen.toLocaleString("tr-TR")+'"/>';
        }

        $(function () {
            var connection = new signalR.HubConnectionBuilder()
                .withUrl("/RefreshSignalHub", {
                    skipNegotiation: true,
                    transport: signalR.HttpTransportType.WebSockets
                })
                .build();

            connection.start().catch(err => console.error(err.toString()));
            connection.on('Send', (message) => {
                location.reload()
            });
        });

    function addTable(orderID) {
        i = 1;
        curRow = document.getElementById("details." + orderID + "." + i);
        if (curRow != null) {
            if (curRow.style.display == "") {
                updateValue = "none";
            } else {
                updateValue = "";
            }
            curRow = document.getElementById("header." + orderID);
            curRow.style.display = updateValue;
            while (true) {
                curRow = document.getElementById("details." + orderID + "." + i);
                if (curRow != null)
                    curRow.style.display = updateValue
                else
                    break;
                i = i + 1
            }
        }
     }
        function getPaidTutar(Id) {
            var curRow = Id.parentNode.parentNode;
            var salesID = curRow.cells.item(0).innerHTML;
            var PaidTutar = document.getElementById("paidTutar" + salesID.toString().trim()).value;
            return PaidTutar;
         }

	function getValue2(Id) {
           var xmlhttp = new XMLHttpRequest();
           var curRow = Id.parentNode.parentNode;
           var salesID = curRow.cells.item(0).innerHTML.trim();
            var val = document.getElementById("paidTutar" + salesID).value;
            val = val.replace(".", ",");
           xmlhttp.onreadystatechange = function() {
             if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
               if (xmlhttp.status == 200)
               {
               }
               else if (xmlhttp.status == 400)
                    {
                        alert('There was an error 400');
                    }
                    else
                    {
                        alert('something else other than 200 was returned');
                    }
               }
         };

         xmlhttp.open("GET","/OrderModel/updatePaidAmount?salesID="+salesID+"&paidAmount="+val , false);
         xmlhttp.send();
       }


        function getValueold2(Id) {
            var curRow = Id.parentNode.parentNode;
            var salesID = curRow.cells.item(0).innerHTML;
            var val=document.getElementById("paidTutar"+salesID.toString().trim()).value;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("updatePaidAmount", "OrderModel")',
                data: { "salesID": salesID, "paidAmount": val },
                success: function (data) {
                }
            });
            return false;
        }
            </script>
        }
